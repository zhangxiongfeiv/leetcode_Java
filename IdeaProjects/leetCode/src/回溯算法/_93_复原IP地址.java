package 回溯算法;

import java.util.*;

/**
        给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。
        有效的 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。
        例如："0.1.2.201" 和 "192.168.1.1" 是 有效的 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效的 IP 地址。
        示例 1：

        输入：s = "25525511135"
        输出：["255.255.11.135","255.255.111.35"]
        示例 2：

        输入：s = "0000"
        输出：["0.0.0.0"]
        示例 3：

        输入：s = "1111"
        输出：["1.1.1.1"]
        示例 4：

        输入：s = "010010"
        输出：["0.10.0.10","0.100.1.0"]
        示例 5：

        输入：s = "101023"
        输出：["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
         
        提示：
        0 <= s.length <= 3000
        s 仅由数字组成

        来源：力扣（LeetCode）
        链接：https://leetcode-cn.com/problems/restore-ip-addresses
        著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

public class _93_复原IP地址 {

    public List<String> restoreIpAddresses(String s) {
        int len = s.length();
        List<String> res = new ArrayList<>();
        if (len < 4 || len > 12) return res;
        Deque<String> path = new ArrayDeque<>();

        dfs(res, path, s, 0, 0);

        return res;
    }

    private void dfs(List<String> res,Deque<String> path,String s,int begin,int depth){
        if (depth == 4 && begin == s.length()){
            res.add(String.join(".", path));
            return;
        }

        for (int i = begin; i < 3; i++) {

            // 以 0 开头 -> 剪枝
            if (i > begin && s.charAt(begin) == '0') continue;
            String str = s.substring(begin, i + 1);
            long num = Long.parseLong(str);
            // 数字 > 255 剪枝
            if (num > 255) continue;

            path.addLast(str);
            dfs(res, path, s, i + 1, depth + 1);
            path.removeLast();
        }
    }

    public static void main(String[] args) {
        _93_复原IP地址 cls = new _93_复原IP地址();
        cls.restoreIpAddresses
    }
}
